name: Deploy to AKS

on:
 push:
  branches:
   - main
 workflow_dispatch:

jobs:
 lint:
  runs-on: ubuntu-latest
  permissions:
    security-events: write
  steps:
   - name: check out code
     uses: actions/checkout@v2
   - name: Login via Azure CLI
     uses: azure/login@v1
     with: 
      creds: ${{ secrets.AZURE_CREDENTIALS }}
   - name: login to Docker Hub
     uses: azure/docker-login@v1
     with:
      username: ${{ secrets.REGISTRY_USERNAME }}
      password: ${{ secrets.REGISTRY_PASSWORD }}
      login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
   - name: Set up Docker Buildx
     uses: docker/setup-buildx-action@v2
   - name: Build Docker Image
     working-directory: .
     run: |
      docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/my-go-app:${{ github.sha }}
      docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/my-go-app:${{ github.sha }}
   - name: Slim the image
     id: slim
     uses: kitabisa/docker-slim-action@v1
     env:
      DSLIM_HTTP_PROBE: false
     with:
      target: ${{ secrets.REGISTRY_LOGIN_SERVER }}/my-go-app:${{ github.sha }}
      tag: "slim"
   - name: Run Trivy vulnerability scanner
     uses: aquasecurity/trivy-action@master
     continue-on-error: true
     with:
        image-ref: ${{ secrets.REGISTRY_LOGIN_SERVER }}/my-go-app:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'MEDIUM,HIGH,CRITICAL'
   - name: Upload Trivy scan to Github Security Tab
     uses: github/codeql-action/upload-sarif@v2
     with:
      sarif_file: 'trivy-results.sarif'
   - uses: actions/setup-dotnet@v1
     with:
        dotnet-version: |
          5.0.x
          6.0.x
    # Run analyzers
   - name: Run Microsoft Security DevOps Analysis
     uses: microsoft/security-devops-action@preview
     id: msdo
     with:
       categories: 'Iac'
    # Upload alerts to the Security tab
   - name: Upload alerts to Security tab
     uses: github/codeql-action/upload-sarif@v2
     with:
        sarif_file: ${{ steps.msdo.outputs.sarifFile }}
   - name: Run kubesec 
     uses: controlplaneio/kubesec-action@main
     with: 
      input: go-pods.yaml
      exit-code: "0"
      format: template
      template: template/sarif.tpl
      output: kubesec-results.sarif
   - name: Upload Kubesec scan results to GitHub Security tab
     uses: github/codeql-action/upload-sarif@v1
     with:
          sarif_file: kubesec-results.sarif
   - name: Dump the report
     run: echo "${REPORT}"
     env:
      REPORT: ${{ steps.slim.outputs.report }}
   - name: Set AKS context
     id: set-context
     uses: azure/aks-set-context@v3
     with:
      resource-group: ${{ secrets.RESOURCE_GROUP }}
      cluster-name: ${{ secrets.CLUSTER_NAME }}
   - name: Setup kubectl
     id: install-kubectl
     uses: azure/setup-kubectl@v3
   - name: Deploy to AKS
     id: deploy-aks
     uses: azure/k8s-deploy@v4
     with:
      namespace: default
      manifests: |
          go-pods.yaml
      images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/my-go-app:${{ github.sha }}
      pull-images: false
      
   
